RPC

files -> create folder at home -> RPC -> create doc file -> add.x
2. In add.x
struct numbers {
int a;
int b;
};
program ADD_PROG{
version ADD_VERS
{
int add(numbers)=1;
}=1;
}=0x23451111;
3. open terminal
$cd RPC
$rpcgen -a -C add.x
$make -f Makefile.add
4. in add_server.c file
below static int result;
printf("Add (%d,%d) is called \n",argp->a,argp->b);
result = argp->a + argp->b;
5. in add_client.c file
-------
6. open terminal
$make -f Makefile.add
$sudo ./add_server
$pass- ###
7. open new terminal
$cd RPC
$sudo ./add.client localhost 10 20
Result: 30
----------done-------------

2. Implementation of RMI (Netbean IDE)
Interface - Adder
import java.rmi.Remote;
import java.rmi.RemoteException;
/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
/**
*
* @author MMM
*/
public interface Adder extends Remote
{
public int add(int x, int y) throws RemoteException;
}
Class Server -
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
/**
*
* @author MMM
*/
public class Server extends UnicastRemoteObject implements Adder
{
public Server() throws RemoteException
{
super();
}
public int add( int x, int y) throws RemoteException
{
return x+y;
}
public static void main(String args[])throws RemoteException
{
Registry reg = LocateRegistry.createRegistry(1011);
reg.rebind("server",new Server());
System.out.println("server is running");
}
}
Client -
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.logging.Level;
import java.util.logging.Logger;
/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
/**
*
* @author MMM
*/
public class Client
{
public static void main(String args[]) throws RemoteException
{
Client c = new Client();
c.connectServer();
}
private void connectServer()
{
try
{
Registry reg = LocateRegistry.getRegistry("localhost",1011);
Adder a = (Adder) reg.lookup("server");
System.out.println("addition is "+a.add(10,20));
}
catch (Exception e)
{
System.out.println(e);
}
}
}


3. Clock Synchronization â€“ Lampo Algo
// Lamports Algorithm
#include<stdio.h>
#include<conio.h>
int max1(int a, int b) //to find the maximum timestamp between two events
{
if (a > b)
return a;
else return b;
}
int main() {
int i, j, k, p1[20], p2[20], e1, e2, dep[20][20];
// clrscr();
printf("enter the no. of events for process p1 and p2: ");
scanf("%d %d", & e1, & e2);
for (i = 0; i < e1; i++) p1[i] = i + 1;
for (i = 0; i < e2; i++) p2[i] = i + 1;
printf("enter the dependency matrix:\n");
printf("\t Happened before relationship : \n enter 1 if e1 --> e2 \n\t enter -1, if e2 --> e1 \n\t else enter 0 \n\n");
for (i = 0; i < e2; i++)
printf("\te2%d", i + 1);
for (i = 0; i < e1; i++) {
printf("\n e1%d \t", i + 1);
for (j = 0; j < e2; j++)
scanf("%d", & dep[i][j]);
}
for (i = 0; i < e1; i++) {
for (j = 0; j < e2; j++) {
if (dep[i][j] == 1) //change the timestamp if dependency exist
{
p2[j] = max1(p2[j], p1[i] + 1);
for (k = j; k < e2; k++)
p2[k + 1] = p2[k] + 1;
}
if (dep[i][j] == -1) //change the timestamp if dependency exist
{
p1[i] = max1(p1[i], p2[j] + 1);
for (k = i; k < e1; k++)
p2[k + 1] = p1[k] + 1;
}
}
}
printf("P1 : "); //to print the outcome of Lamport Logical Clock
for (i = 0; i < e1; i++) {
printf("%d", p1[i]);
}
printf("\n P2 : ");
for (j = 0; j < e2; j++)
printf("%d", p2[j]);
// getch();

#include <stdio.h>
#include <stdlib.h>
void main()
{
int i, j, k;
int x = 0;
char a[10][10];
int n, num[10], b[10][10];
// clrscr();
printf("Enter the no. of physical clocks: ");
scanf("%d", &n);
for (i = 0; i < n; i++)
{
printf("\nNo. of nodes for physical clock %d", i + 1);
scanf("%d", &num[i]);
x = 0;
for (j = 0; j < num[i]; j++)
{
printf("\nEnter the name of process: ");
scanf("%s", &a[i][j]);
b[i][j] = x + rand() % 10;
x = b[i][j] + 1;
}
}
printf("\nPress a key for watching timestamp of physical clocks");
// getch();
// clrscr();
for (i = 0; i < n; i++)
{
printf("Physical Clock %d", i + 1);
for (j = 0; j < num[i]; j++)
{
printf("\nProcess %c", a[i][j]);
printf(" has P.T. :%d ", b[i][j]);
printf("\n");
}
}
printf("Press a key for watching timestamp of logical clocks");
// getch();
// clrscr();
x = 0;
for (i = 0; i < 10; i++)
for (j = 0; j < n; j++)
for (k = 0; k < num[j]; k++)
if (b[j][k] == i)
{
x = rand() % 10 + x;
printf("Logical Clock Timestamp for process %c", a[j][k]);
printf(":%d ", x);
printf("\n");
}
// getch();
return;
}


Mutual Excliusion

#include<stdio.h>
#include<conio.h>
//#include<dos.h>
//#include<time.h>

int cs=0,pro=0,c;
double run=5;
char key='a';
//time_t t1,t2,e1,e2;

void main()
{
//clrscr();
printf("\nMutual exclusion \n");
printf("Press any key(except q) to enter a process into critical section\n.");
printf(" \nPress q at any time to exit.\n");
//t1 = time(NULL) -5;
while(key!='q')
{
while(!kbhit())
{
pro++;
printf("\nProcess %d enters the critical section.\n ",pro);
sleep(3);
printf("\nProcess %d leaves the critical section.\n ",pro);
}
key = getch();
if(key!='q')
{
//if(cs!=0)
printf("Error: Another process is currently executing critical section Please wait till its execution is over.\n");
}
else
{
x:printf("Process %d entered critical section\n",pro);
 // cs=1;
 // pro++;
 // t1 = time(NULL);
//}

}
}}
